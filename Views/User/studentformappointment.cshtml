<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Chart.js Example</title>
	<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
	<script src="https://hammerjs.github.io/dist/hammer.js"></script>
</head>


<style>
	.chart-container {
		width: 100%;
		overflow-x: auto;
	}

	.slider-container {
		width: 80%;
		margin: auto;
		overflow: hidden;
	}

	.slider {
		display: flex;
		transition: transform 0.5s ease-in-out;
	}

	.slide {
		min-width: 100%;
	}

	/* Set fixed width and height for the images */
	.slide img {
		width: 100%;
		height: 300px;
		/* Adjust the height as needed */
		object-fit: cover;
		/* Maintain aspect ratio and cover the container */
	}
</style>

<body>
	<div class="chart-container">
		<canvas id="myChart"></canvas>
	</div>

	<div class="slider-container">
		<div class="slider">
			<!-- Add your images here -->
			<div class="slide"><img src="~/image/background.jpg" alt="Image 1"> </div>
			<div class="slide"><img src="~/image/frvsignin.jpg" alt="Image 2"></div>
			<div class="slide"><img src="~/image/school.jpg" alt="Image 3"></div>

			<!-- Add more slides as needed -->
		</div>
	</div>








	<script>

		const slider = document.querySelector('.slider');
		let isTransitioning = false;

		function nextSlide() {
			if (!isTransitioning) {
				isTransitioning = true;
				setTimeout(() => {
					const firstSlide = slider.firstElementChild;
					slider.style.transition = 'none';
					slider.style.transform = 'translateX(0)';
					setTimeout(() => {
						slider.style.transition = 'transform 2s ease-in-out';
						firstSlide.parentNode.appendChild(firstSlide);
						slider.style.transform = 'translateX(-100%)';
						isTransitioning = false;
					}, 0);
				}, 500);
			}
		}

		setInterval(nextSlide, 5000); // Change slide every 3 seconds






		document.addEventListener("DOMContentLoaded", function () {

			$.ajax("../api/adminapi/getNR")
				.done(function (result) {

					var b = [];

					b = result.filter(function (item) {
						return item.test === "Neutrophils" && item.unitname === "%";
					});

					var c = [];

					c = result.filter(function (item) {
						return item.test === "WBC" && item.unitname === "x(10^9)/L";
					});

					var d = [];

					d = result.filter(function (item) {
						return item.test === "Lymphocyte" && item.unitname === "%";
					});


					var e = [];

					e = result.filter(function (item) {
						return item.test === "Basophil" && item.unitname === "%";
					});

					var f = [];

					f = result.filter(function (item) {
						return item.test === "Eosinophil" && item.unitname === "%";
					});

					var g = [];

					g = result.filter(function (item) {
						return item.test === "Hematocrit" && item.unitname === "mg/dl";
					});


					var h = [];

					h = result.filter(function (item) {
						return item.test === "Hemoglobin" && item.unitname === "mg/dl";
					});


					var i = [];

					i = result.filter(function (item) {
						return item.test === "MCH" && item.unitname === "pg";
					});

					var j = [];

					j = result.filter(function (item) {
						return item.test === "MCHC" && item.unitname === "g/dL";
					});

					var k = [];

					k = result.filter(function (item) {
						return item.test === "MCV" && item.unitname === "fL";
					});

					var l = [];

					l = result.filter(function (item) {
						return item.test === "Monocyte" && item.unitname === "%";
					});


					var m = [];

					m = result.filter(function (item) {
						return item.test === "MPV" && item.unitname === "fL";
					});

					var n = [];

					n = result.filter(function (item) {
						return item.test === "Platelet Count" && item.unitname === "x(10^9)/L";
					});

					var o = [];

					o = result.filter(function (item) {
						return item.test === "RBC" && item.unitname === "10^12/L";
					});

					var p = [];

					p = result.filter(function (item) {
						return item.test === "RCDW" && item.unitname === "%";
					});







                 



					const sampleValue = {
						"shiId": 11,
						"gender": "Male",
						"neutrophils": 56,
						"neutrophilsunits": "%",
						"wbc": 11,
						"wbcunits": "x(10^9)/L",
						"lymphocyte": 30,
						"lymphocyteunits": "%",
						"basophil": 13,
						"basophilunits": "%",
						"eosinophil": 5,
						"eosinophilunits": "%",
						"hematocrit": 30,
						"hematocritunits": "mg/dl",
						"hemoglobin": 16,
						"hemoglobinunits": "mg/dl",
						"mch": 31,
						"mchunits": "pg",
						"mchc": 41,
						"mchcunits": "g/dL",
						"mcv": 15,
						"mcvunits": "fL",
						"monocyte": 11,
						"monocyteunits": "%",
						"mpv": 8,
						"mpvunits": "fL",
						"plateletcount": 61,
						"plateletcountunits": "x(10^9)/L",
						"rbc": 8,
						"rbcunits": "10^12/L",
						"rcdw": 13,
						"rcdwunits": "%",
					};

					// Check Neutrophils value against maxRange and minRange
					const neutrophilsColor = sampleValue.neutrophils >= b[0].minRange && sampleValue.neutrophils <= b[0].maxRange ? 'green' : 'red';
					// Check WBC value against maxRange and minRange
					const wbcColor = sampleValue.wbc >= c[0].minRange && sampleValue.wbc <= c[0].maxRange ? 'green' : 'red';
					const lymColor = sampleValue.lymphocyte >= d[0].minRange && sampleValue.lymphocyte <= d[0].maxRange ? 'green' : 'red';
					const basoColor = sampleValue.basophil >= e[0].minRange && sampleValue.basophil <= e[0].maxRange ? 'green' : 'red';
					const eosiColor = sampleValue.eosinophil >= f[0].minRange && sampleValue.eosinophil <= f[0].maxRange ? 'green' : 'red';
					const hemaColor = sampleValue.hematocrit >= g[0].minRange && sampleValue.hematocrit <= g[0].maxRange ? 'green' : 'red';
					const hemoColor = sampleValue.hemoglobin >= h[0].minRange && sampleValue.hemoglobin <= h[0].maxRange ? 'green' : 'red';
					const mchColor = sampleValue.mch >= i[0].minRange && sampleValue.mch <= i[0].maxRange ? 'green' : 'red';
					const mchcColor = sampleValue.mchc >= j[0].minRange && sampleValue.mchc <= j[0].maxRange ? 'green' : 'red';
					const mcvColor = sampleValue.mcv >= k[0].minRange && sampleValue.mcv <= k[0].maxRange ? 'green' : 'red';
					const monoColor = sampleValue.monocyte >= l[0].minRange && sampleValue.monocyte <= l[0].maxRange ? 'green' : 'red';
					const mpvColor = sampleValue.mpv >= l[0].minRange && sampleValue.mpv <= l[0].maxRange ? 'green' : 'red';
					const plColor = sampleValue.plateletcount >= l[0].minRange && sampleValue.plateletcount <= l[0].maxRange ? 'green' : 'red';
					const rbcColor = sampleValue.rbc >= l[0].minRange && sampleValue.rbc <= l[0].maxRange ? 'green' : 'red';
					const rcdwColor = sampleValue.rcdw >= l[0].minRange && sampleValue.rcdw <= l[0].maxRange ? 'green' : 'red';


					console.log(Chart.version);
					console.log(neutrophilsColor, wbcColor, lymColor, basoColor, eosiColor, hemaColor, hemoColor, mchColor, mchcColor, mcvColor, monoColor, mpvColor, plColor, rbcColor, rcdwColor);


					const ctx = document.getElementById('myChart').getContext('2d');

					var chartData = {
						labels: ['Neutrophils', 'WBC', 'Lympocyte', 'Basophil', 'Eosinophil', 'Hematocrit', 'Hemoglobin', 'Mch', 'Mchc', 'Mcv', 'Monocyte', 'Mpv', 'Platelet Count', 'Rbc', 'Rcdw'],
						datasets: [{
							label: 'Blood Count',

							data: [sampleValue.neutrophils,
							sampleValue.wbc,
							sampleValue.lymphocyte,
							sampleValue.basophil,
							sampleValue.eosinophil,
							sampleValue.hematocrit,
							sampleValue.hemoglobin,
							sampleValue.mch,
							sampleValue.mchc,
							sampleValue.mcv,
							sampleValue.monocyte,
							sampleValue.mpv,
							sampleValue.plateletcount,
							sampleValue.rbc,
							sampleValue.rcdw],



							backgroundColor: [
								neutrophilsColor,
								wbcColor,
								lymColor,
								basoColor,
								eosiColor,
								hemaColor,
								hemoColor,
								mchColor,
								mchcColor,
								mcvColor,
								monoColor,
								mpvColor,
								plColor,
								rbcColor,
								rcdwColor,
							],
							borderColor: [
								neutrophilsColor,
								wbcColor,
								lymColor,
								basoColor,
								eosiColor,
								hemaColor,
								hemoColor,
								mchColor,
								mchcColor,
								mcvColor,
								monoColor,
								mpvColor,
								plColor,
								rbcColor,
								rcdwColor,
							],
							borderWidth: 1
						}]
					};




					var chartOptions = {
						responsive: true,
						maintainAspectRatio: false, // This prevents the chart from maintaining its aspect ratio
					};

					// Create the chart
					var myChart = new Chart(ctx, {
						type: 'bar',
						data: chartData,
						options: chartOptions
					});








				});

		});







	</script>
</body>

</html>


<style>
	.sidebar-wrapper {
		display: none;
	}
</style>