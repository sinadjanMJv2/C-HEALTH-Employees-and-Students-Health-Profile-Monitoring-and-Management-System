@Html.Partial("PartialStudentHealthProfile/cardtable")
@Html.Partial("PartialStudentHealthProfile/StudentHealthInformationTable")
@Html.Partial("PartialStudentHealthProfile/updateStudentHealth")
@Html.Partial("PartialStudentHealthProfile/StudentHealthInfo")


@* gamit kaayu ni siya para maka pa display og value sa select option *@
<script src="~/lib/jquery/dist/jquery.js"></script>


<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    var selectedStudentHI;
    var selectedStudentHIId;
    var StudentHIList = {};
    var arr = {};
    var disdate = {};
    var dateClick;
    var dateComp = {};


    $(document).ready(function () {

        var userType = sessionStorage.getItem('userType');
        if (userType === null) {
            window.location.href = "/Page/SIGN";
        }
        else {
            if (userType === "patient") {
                window.location.href = "/User/StudentHealthProfile";
            }
        }

        populateIndex();
        getUnits();

        function getUnits() {
            $.ajax("../api/adminapi/getNR")
                .done(function (result) {


                    var a = [];
                    a = result.filter(function (item) {
                        return item.test === "WBC";
                    });

                    var b = [];
                    b = result.filter(function (item) {
                        return item.test === "Neutrophils";
                    });

                    var c = [];
                    c = result.filter(function (item) {
                        return item.test === "Lymphocyte";
                    });

                    var d = [];
                    d = result.filter(function (item) {
                        return item.test === "Monocyte";
                    });

                    var e = [];
                    e = result.filter(function (item) {
                        return item.test === "Eosinophil";
                    });

                    var f = [];
                    f = result.filter(function (item) {
                        return item.test === "Basophil";
                    });

                    var g = [];
                    g = result.filter(function (item) {
                        return item.test === "Hemoglobin";
                    });

                    var h = [];
                    h = result.filter(function (item) {
                        return item.test === "Hematocrit";
                    });

                    var ii = [];
                    ii = result.filter(function (item) {
                        return item.test === "RBC";
                    });

                    console.log(ii);

                    var j = [];
                    j = result.filter(function (item) {
                        return item.test === "MCV";
                    });


                    var k = [];
                    k = result.filter(function (item) {
                        return item.test === "MCH";
                    });


                    var l = [];
                    l = result.filter(function (item) {
                        return item.test === "MCHC";
                    });

                    var m = [];
                    m = result.filter(function (item) {
                        return item.test === "RCDW";
                    });


                    var n = [];
                    n = result.filter(function (item) {
                        return item.test === "Platelet Count";
                    });

                    var o = [];
                    o = result.filter(function (item) {
                        return item.test === "MPV";
                    });



                    var template = document.querySelector("template#unitsOptionTemplate");


                    var parent = document.querySelectorAll("#wbc");
                    for (i = 0; i < parent.length; i++) {
                        a.forEach(function (item) {
                            var cloned = template.content.cloneNode(true);
                            //  cloned.querySelector("option").value = item.unitId;
                            cloned.querySelector("option").innerText = item.unitname;

                            parent[i].prepend(cloned);
                        });
                    }



                    var parent = document.querySelectorAll("#neutrophils");
                    for (i = 0; i < parent.length; i++) {
                        b.forEach(function (item) {
                            var cloned = template.content.cloneNode(true);
                            //    cloned.querySelector("option").value = item.unitId;
                            cloned.querySelector("option").innerText = item.unitname;

                            parent[i].prepend(cloned);
                        });
                    }



                    var parent = document.querySelectorAll("#lymphocyte");
                    for (i = 0; i < parent.length; i++) {
                        c.forEach(function (item) {
                            var cloned = template.content.cloneNode(true);
                            //  cloned.querySelector("option").value = item.unitId;
                            cloned.querySelector("option").innerText = item.unitname;

                            parent[i].prepend(cloned);
                        });
                    }






                    var parent = document.querySelectorAll("#monocyte");
                    for (i = 0; i < parent.length; i++) {
                        d.forEach(function (item) {
                            var cloned = template.content.cloneNode(true);
                            //     cloned.querySelector("option").value = item.unitId;
                            cloned.querySelector("option").innerText = item.unitname;

                            parent[i].prepend(cloned);
                        });
                    }





                    var parent = document.querySelectorAll("#eosinophil");
                    for (i = 0; i < parent.length; i++) {
                        e.forEach(function (item) {
                            var cloned = template.content.cloneNode(true);
                            //     cloned.querySelector("option").value = item.unitId;
                            cloned.querySelector("option").innerText = item.unitname;

                            parent[i].prepend(cloned);
                        });
                    }




                    var parent = document.querySelectorAll("#basophil");
                    for (i = 0; i < parent.length; i++) {
                        f.forEach(function (item) {
                            var cloned = template.content.cloneNode(true);
                            //   cloned.querySelector("option").value = item.unitId;
                            cloned.querySelector("option").innerText = item.unitname;

                            parent[i].prepend(cloned);
                        });
                    }





                    var parent = document.querySelectorAll("#hemoglobin");
                    for (i = 0; i < parent.length; i++) {
                        g.forEach(function (item) {
                            var cloned = template.content.cloneNode(true);
                            //   cloned.querySelector("option").value = item.unitId;
                            cloned.querySelector("option").innerText = item.unitname;

                            parent[i].prepend(cloned);
                        });
                    }





                    var parent = document.querySelectorAll("#hematocrit");
                    for (i = 0; i < parent.length; i++) {
                        h.forEach(function (item) {
                            var cloned = template.content.cloneNode(true);
                            //    cloned.querySelector("option").value = item.unitId;
                            cloned.querySelector("option").innerText = item.unitname;

                            parent[i].prepend(cloned);
                        });
                    }





                    var parent = document.querySelectorAll("#rbc");
                    for (i = 0; i < parent.length; i++) {
                        ii.forEach(function (item) {
                            var cloned = template.content.cloneNode(true);
                            //   cloned.querySelector("option").value = item.unitId;
                            cloned.querySelector("option").innerText = item.unitname;

                            parent[i].prepend(cloned);
                        });
                    }





                    var parent = document.querySelectorAll("#mcv");
                    for (i = 0; i < parent.length; i++) {
                        j.forEach(function (item) {
                            var cloned = template.content.cloneNode(true);
                            //     cloned.querySelector("option").value = item.unitId;
                            cloned.querySelector("option").innerText = item.unitname;

                            parent[i].prepend(cloned);
                        });
                    }





                    var parent = document.querySelectorAll("#mch");
                    for (i = 0; i < parent.length; i++) {
                        k.forEach(function (item) {
                            var cloned = template.content.cloneNode(true);
                            //   cloned.querySelector("option").value = item.unitId;
                            cloned.querySelector("option").innerText = item.unitname;

                            parent[i].prepend(cloned);
                        });
                    }




                    var parent = document.querySelectorAll("#mchc");
                    for (i = 0; i < parent.length; i++) {
                        l.forEach(function (item) {
                            var cloned = template.content.cloneNode(true);
                            //    cloned.querySelector("option").value = item.unitId;
                            cloned.querySelector("option").innerText = item.unitname;

                            parent[i].prepend(cloned);
                        });
                    }



                    var parent = document.querySelectorAll("#rcdw");
                    for (i = 0; i < parent.length; i++) {
                        m.forEach(function (item) {
                            var cloned = template.content.cloneNode(true);
                            //    cloned.querySelector("option").value = item.unitId;
                            cloned.querySelector("option").innerText = item.unitname;

                            parent[i].prepend(cloned);
                        });
                    }



                    var parent = document.querySelectorAll("#pl");
                    for (i = 0; i < parent.length; i++) {
                        n.forEach(function (item) {
                            var cloned = template.content.cloneNode(true);
                            //   cloned.querySelector("option").value = item.unitId;
                            cloned.querySelector("option").innerText = item.unitname;

                            parent[i].prepend(cloned);
                        });
                    }



                    var parent = document.querySelectorAll("#mpv");
                    for (i = 0; i < parent.length; i++) {
                        o.forEach(function (item) {
                            var cloned = template.content.cloneNode(true);
                            //    cloned.querySelector("option").value = item.unitId;
                            cloned.querySelector("option").innerText = item.unitname;

                            parent[i].prepend(cloned);
                        });
                    }


                });

        }



        function populateIndex() {

            $.ajax("../api/adminapi/getStudentHI")
                .done(function (data) {

                    dateComp = data;
                    StudentHIList = data;

                    document.querySelector(".parent").innerHTML = "";


                    // Remove duplicates based on 'datet'
                    let uniqueData = [];
                    let seenDates = new Set();

                    data.forEach(entry => {
                        if (!seenDates.has(entry.datet)) {
                            seenDates.add(entry.datet);
                            uniqueData.push(entry);
                        }
                    });

                    // Display unique data
                    //   console.log(uniqueData);

                    disdate = uniqueData;



                    uniqueData.forEach(function (item) {

                        var template = document.querySelector("template#card-container");
                        var parent = document.querySelector(".parent");
                        var cloned = template.content.cloneNode(true);



                        cloned.querySelector(".card .card-title").innerHTML = item.datet;


                        cloned.querySelector(".datecard").setAttribute("data-datet", item.datet);

                        parent.prepend(cloned);
                    });









                });
        }//end of the function



        $('#AsearchText').on("input", function () {
            var searchedItem = $(this).val();

            //console.log(searchedItem);

            var search = disdate.filter(element => element.datet.toLowerCase().includes(searchedItem.toLowerCase()) || element.datet.toUpperCase().includes(searchedItem.toUpperCase()));
            //console.log(sear);

            document.querySelector(".parent").innerHTML = "";

            search.forEach(function (item) {
                var template = document.querySelector("template#card-container");
                var parent = document.querySelector(".parent");
                var cloned = template.content.cloneNode(true);

                cloned.querySelector(".card .card-title").innerHTML = item.datet;


                cloned.querySelector(".datecard").setAttribute("data-datet", item.datet);


                parent.prepend(cloned);
            });


        });














        $(".parent").delegate(".datecard", "click", function (e) {

            // console.log("na click najyud");
            var i = e.target.closest("div").getAttribute("data-datet");

            console.log("salamat sa pag click", i);

            if (i != null) {
                dateClick = i;
                //    console.log(dateClick + "mao ni siya");


                //filtere data that have th same value on selected date

                var filteredData = dateComp.filter(function (entry) {
                    return entry.datet === dateClick;
                });

                //   console.log(filteredData);

                //para dili magka duplicate ang mga value
                table.clear().draw();


                populateTable(filteredData);

            }

        });



        // DataTable initialization
        var table = $('#StudentHealthInfoData').DataTable({
            columns: [
                { data: 'shiId' },
                { data: 'fullname' },
                { data: 'birthdate' },
                { data: 'gender' },
                { data: 'age' },
                { data: 'departmentName' },
                { data: 'courseStrandYearName' },

                {
                    data: 'shiId',
                    render: function (data, type, row) {

                         let userTypeLog = window.sessionStorage.getItem("userType");

                                    if (userTypeLog == null) {
                                        window.location.href = "/Page/SIGN";
                                    } else if (userTypeLog == "physician") {
                                        return btnAddStudentHealthDataPhysician(data);
                                    }else if (userTypeLog == "admin") {
                                        return btnAddStudentHealthData(data);
                                    }

                       
                    }
                },
                // Add other columns based on your data fields
            ]
        });


        function btnAddStudentHealthData(shiId) {
            return "<center><a style='color : #ffffff;' class='btn btn-success StudentHIUpdate' data-shiId=" + shiId + " >&emsp;Update&emsp;</a>  <br><br> <a style='color : #ffffff;' class='btn btn-info StudentHIInfo' data-shiId=" + shiId + ">&nbsp;&nbsp;View Info&nbsp;&nbsp;</a> <br><br> <a style='color : #ffffff;' class='btn btn-danger StudentHIDelete' data-shiId=" + shiId + " hidden>&emsp;&nbsp;Delete&nbsp;&emsp;</a></center>"
        }

         function btnAddStudentHealthDataPhysician(shiId) {
            return "<center> <a style='color : #ffffff;' class='btn btn-info StudentHIInfo' data-shiId=" + shiId + ">&nbsp;&nbsp;View Info&nbsp;&nbsp;</a> </center>"
        }



        // Function to populate the table with data
        function populateTable(data) {
            $.each(data, function (index, item) {
                table.row.add(item).draw(false);
            });
        }

        $("tbody").delegate(".StudentHIInfo", "click", function (e) {
            var i = e.target.closest("a").getAttribute("data-shiId");
            console.log(i);

            if (i != null) {
                selectedStudentHIId = i;
                selectedStudentHI = StudentHIList.find(element => element.shiId == i);

                console.log('before', selectedStudentHI)
                $("#modalStudentHealthInfo").modal("toggle");

                //    console.log(selectedStudent);
                $(".cardInfo .info-Name").html('Name &emsp;&emsp;&emsp;: &emsp;' + selectedStudentHI.fullname + '&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; Date Time Requested : &emsp;' + selectedStudentHI.cbcdatetimerequested);
                $(".cardInfo .info-AgeGender").html('Age/Gender : &emsp;' + selectedStudentHI.age + '&nbsp;Year / ' + selectedStudentHI.gender + '&nbsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; Draw Date & Time : &emsp;' + selectedStudentHI.cbcdrawdatetime);
                $(".cardInfo .info-Birthdate").html('Birthdate &emsp;&nbsp;&nbsp;: &emsp;' + selectedStudentHI.birthdate);
                $(".cardInfo .info-HN").html('Hospital No. &nbsp;: &emsp;' + selectedStudentHI.hospitalnumber);
                $(".cardInfo .info-SPID").html('Specimen ID : &emsp;' + selectedStudentHI.shiId);
                $(".cardInfo .info-Physician").html('Physician &emsp;&nbsp;&nbsp;: &emsp;' + selectedStudentHI.cbcphysician);

                $(".cardInfo .info-wbc").html('White Blood Cells &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;' + selectedStudentHI.wbc + '&nbsp;&nbsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;' + selectedStudentHI.wbcunits);
                $(".cardInfo .info-neutrophils").html('Neutrophils &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;' + selectedStudentHI.neutrophils + '&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;' + selectedStudentHI.neutrophilsunits);
                $(".cardInfo .info-lymphocyte").html('Lymphocyte &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&nbsp;&nbsp;' + selectedStudentHI.lymphocyte + '&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;' + selectedStudentHI.lymphocyteunits);
                $(".cardInfo .info-monocyte").html('Monocyte &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&nbsp;&nbsp;&nbsp;' + selectedStudentHI.monocyte + '&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;' + selectedStudentHI.monocyteunits);
                $(".cardInfo .info-eosinophil").html('Eosinophil &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&nbsp;&nbsp;&nbsp;' + selectedStudentHI.eosinophil + '&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;' + selectedStudentHI.eosinophilunits);
                $(".cardInfo .info-basophil").html('Basophil &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&nbsp;&nbsp;' + selectedStudentHI.basophil + '&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;' + selectedStudentHI.basophilunits);
                $(".cardInfo .info-hemoglobin").html('Hemoglobin &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&nbsp;&nbsp;' + selectedStudentHI.hemoglobin + '&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;' + selectedStudentHI.hemoglobinunits);
                $(".cardInfo .info-hematocrit").html('Hematocrit &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&nbsp;&nbsp;&nbsp;&nbsp;' + selectedStudentHI.hematocrit + '&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;' + selectedStudentHI.hematocritunits);
                $(".cardInfo .info-rbc").html('Red Blood Cells &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&nbsp;&nbsp;&nbsp;&nbsp;' + selectedStudentHI.rbc + '&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;' + selectedStudentHI.rbcunits);
                $(".cardInfo .info-mcv").html('Mean Corpuscular Volume &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&nbsp;' + selectedStudentHI.mcv + '&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;' + selectedStudentHI.mcvunits);
                $(".cardInfo .info-mch").html('Mean Corpuscular Hemoglobin &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;' + selectedStudentHI.mch + '&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;' + selectedStudentHI.mchunits);
                $(".cardInfo .info-mchc").html('Mean Corpuscular Hemoglobin Concentration&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;' + selectedStudentHI.mchc + '&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;' + selectedStudentHI.mchcunits);
                $(".cardInfo .info-rcdw").html('Red Cell Distribution Width &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&nbsp;&nbsp;' + selectedStudentHI.rcdw + '&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;' + selectedStudentHI.rcdwunits);
                $(".cardInfo .info-plateletcount").html('Platelet Count &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&nbsp;&nbsp;' + selectedStudentHI.plateletcount + '&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;' + selectedStudentHI.plateletcountunits);
                $(".cardInfo .info-mpv").html('MPV &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&nbsp;&nbsp;' + selectedStudentHI.mpv + '&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;' + selectedStudentHI.mpvunits);



                ///////////



                $.ajax("../api/adminapi/getNR")
                    .done(function (result) {

                        var b = [];

                        b = result.filter(function (item) {
                            return item.test === "Neutrophils" && item.unitname === "%";
                        });
                        console.log(b)

                        var c = [];

                        c = result.filter(function (item) {
                            return item.test === "WBC" && item.unitname === "x(10^9)/L";
                        });

                        var d = [];

                        d = result.filter(function (item) {
                            return item.test === "Lymphocyte" && item.unitname === "%";
                        });


                        var e = [];

                        e = result.filter(function (item) {
                            return item.test === "Basophil" && item.unitname === "%";
                        });

                        var f = [];

                        f = result.filter(function (item) {
                            return item.test === "Eosinophil" && item.unitname === "%";
                        });

                        var g = [];

                        g = result.filter(function (item) {
                            return item.test === "Hematocrit" && item.unitname === "mg/dl";
                        });


                        var h = [];

                        h = result.filter(function (item) {
                            return item.test === "Hemoglobin" && item.unitname === "mg/dl";
                        });


                        var i = [];

                        i = result.filter(function (item) {
                            return item.test === "MCH" && item.unitname === "pg";
                        });

                        var j = [];

                        j = result.filter(function (item) {
                            return item.test === "MCHC" && item.unitname === "g/dL";
                        });

                        var k = [];

                        k = result.filter(function (item) {
                            return item.test === "MCV" && item.unitname === "fL";
                        });

                        var l = [];

                        l = result.filter(function (item) {
                            return item.test === "Monocyte" && item.unitname === "%";
                        });


                        var m = [];

                        m = result.filter(function (item) {
                            return item.test === "MPV" && item.unitname === "fL";
                        });

                        var n = [];

                        n = result.filter(function (item) {
                            return item.test === "Platelet Count" && item.unitname === "x(10^9)/L";
                        });

                        var o = [];

                        o = result.filter(function (item) {
                            return item.test === "RBC" && item.unitname === "10^12/L";
                        });

                        var p = [];

                        p = result.filter(function (item) {
                            return item.test === "RCDW" && item.unitname === "%";
                        });



                        console.log('Reccieving ID', selectedStudentHI.shiId);



                        // console.log(selectedStudentHI.neutrophils)
                        // Check Neutrophils value against maxRange and minRange
                        const neutrophilsColor = selectedStudentHI.neutrophils >= b[0].minRange && selectedStudentHI.neutrophils <= b[0].maxRange ? 'green' : 'red';
                        // Check WBC value against maxRange and minRange
                        const wbcColor = selectedStudentHI.wbc >= c[0].minRange && selectedStudentHI.wbc <= c[0].maxRange ? 'green' : 'red';
                        const lymColor = selectedStudentHI.lymphocyte >= d[0].minRange && selectedStudentHI.lymphocyte <= d[0].maxRange ? 'green' : 'red';
                        const basoColor = selectedStudentHI.basophil >= e[0].minRange && selectedStudentHI.basophil <= e[0].maxRange ? 'green' : 'red';
                        const eosiColor = selectedStudentHI.eosinophil >= f[0].minRange && selectedStudentHI.eosinophil <= f[0].maxRange ? 'green' : 'red';
                        const hemaColor = selectedStudentHI.hematocrit >= g[0].minRange && selectedStudentHI.hematocrit <= g[0].maxRange ? 'green' : 'red';
                        const hemoColor = selectedStudentHI.hemoglobin >= h[0].minRange && selectedStudentHI.hemoglobin <= h[0].maxRange ? 'green' : 'red';
                        const mchColor = selectedStudentHI.mch >= i[0].minRange && selectedStudentHI.mch <= i[0].maxRange ? 'green' : 'red';
                        const mchcColor = selectedStudentHI.mchc >= j[0].minRange && selectedStudentHI.mchc <= j[0].maxRange ? 'green' : 'red';
                        const mcvColor = selectedStudentHI.mcv >= k[0].minRange && selectedStudentHI.mcv <= k[0].maxRange ? 'green' : 'red';
                        const monoColor = selectedStudentHI.monocyte >= l[0].minRange && selectedStudentHI.monocyte <= l[0].maxRange ? 'green' : 'red';
                        const mpvColor = selectedStudentHI.mpv >= l[0].minRange && selectedStudentHI.mpv <= l[0].maxRange ? 'green' : 'red';
                        const plColor = selectedStudentHI.plateletcount >= l[0].minRange && selectedStudentHI.plateletcount <= l[0].maxRange ? 'green' : 'red';
                        const rbcColor = selectedStudentHI.rbc >= l[0].minRange && selectedStudentHI.rbc <= l[0].maxRange ? 'green' : 'red';
                        const rcdwColor = selectedStudentHI.rcdw >= l[0].minRange && selectedStudentHI.rcdw <= l[0].maxRange ? 'green' : 'red';


                        console.log(Chart.version);
                        console.log(neutrophilsColor, wbcColor, lymColor, basoColor, eosiColor, hemaColor, hemoColor, mchColor, mchcColor, mcvColor, monoColor, mpvColor, plColor, rbcColor, rcdwColor);




                        var data = {
                            labels: ['Neutrophils 47-80', 'WBC 4.1-10.9', 'Lympocyte 13-40', 'Basophil 0-2', 'Eosinophil 0-5', 'Hematocrit 36-46', 'Hemoglobin 12-16', 'Mch 26-34', 'Mchc 31-36', 'Mcv 80-100', 'Monocyte 2-11', 'Mpv 6.9-11', 'Platelet Count 140-440', 'Rbc 4.5-9.5', 'Rcdw 11.6-14.8'],
                            datasets: [{
                                label: 'Blood Count',

                                data: [selectedStudentHI.neutrophils,
                                selectedStudentHI.wbc,
                                selectedStudentHI.lymphocyte,
                                selectedStudentHI.basophil,
                                selectedStudentHI.eosinophil,
                                selectedStudentHI.hematocrit,
                                selectedStudentHI.hemoglobin,
                                selectedStudentHI.mch,
                                selectedStudentHI.mchc,
                                selectedStudentHI.mcv,
                                selectedStudentHI.monocyte,
                                selectedStudentHI.mpv,
                                selectedStudentHI.plateletcount,
                                selectedStudentHI.rbc,
                                selectedStudentHI.rcdw],



                                backgroundColor: [
                                    neutrophilsColor,
                                    wbcColor,
                                    lymColor,
                                    basoColor,
                                    eosiColor,
                                    hemaColor,
                                    hemoColor,
                                    mchColor,
                                    mchcColor,
                                    mcvColor,
                                    monoColor,
                                    mpvColor,
                                    plColor,
                                    rbcColor,
                                    rcdwColor,
                                ],
                                borderColor: [
                                    neutrophilsColor,
                                    wbcColor,
                                    lymColor,
                                    basoColor,
                                    eosiColor,
                                    hemaColor,
                                    hemoColor,
                                    mchColor,
                                    mchcColor,
                                    mcvColor,
                                    monoColor,
                                    mpvColor,
                                    plColor,
                                    rbcColor,
                                    rcdwColor,
                                ],
                                borderWidth: 1
                            }]
                        };








                        // config 
                        const config = {
                            type: 'bar',
                            data,
                            options: {
                                maintainAspectRatio: false, // Set to false to make it responsive
                                scales: {
                                    y: {
                                        beginAtZero: true
                                    }
                                }
                            }
                        };

                        // render init block
                        const myChart = new Chart(
                            document.getElementById('myChart'),
                            config
                        );

                        // Adjust container width dynamically based on the number of labels
                        const containerBody = document.querySelector('.containerBody');
                        const totalLabels = myChart.data.labels.length;




                        if (totalLabels > 7) {
                            const newWidth = 300 + ((totalLabels - 7) * 30)
                            containerBody.style.width = `${newWidth}%`;
                        }






                    });//end f the funcction










            }
        });


        $("#modalStudentHealthInfoClose").click(function () {

            location.href = '/Admin/AdminStudentHealthInfo';
        });



        $("tbody").delegate(".StudentHIUpdate", "click", function (e) {

            var i = e.target.closest("a").getAttribute("data-shiId");
            console.log("pilay value nimo giatay", i);
            if (i != null) {

                $("#modalStudentHealthUpdate").modal("toggle");

                selectedStudentHIId = i;

                console.log("disdate pakita kurimaw", disdate);

                selectedStudentHI = dateComp.find(element => element.shiId == i);

                //var selectIdToSet = $("#Course");
                console.log('before ang selectedStuudentHI', selectedStudentHI);



                oFormObject = document.forms["StudentHealthUpdateForm"];

                initForm(oFormObject, selectedStudentHI);

                var databaseDate = selectedStudentHI.cbcdatetimerequested;
                var dateObject = new Date(databaseDate);
                var formattedDate = `${dateObject.getFullYear()}-${('0' + (dateObject.getMonth() + 1)).slice(-2)}-${('0' + dateObject.getDate()).slice(-2)}T${('0' + dateObject.getHours()).slice(-2)}:${('0' + dateObject.getMinutes()).slice(-2)}`;

                document.getElementById("dtr").value = formattedDate;


                var databaseDate = selectedStudentHI.cbcdrawdatetime;
                var dateObject = new Date(databaseDate);
                var formattedDate = `${dateObject.getFullYear()}-${('0' + (dateObject.getMonth() + 1)).slice(-2)}-${('0' + dateObject.getDate()).slice(-2)}T${('0' + dateObject.getHours()).slice(-2)}:${('0' + dateObject.getMinutes()).slice(-2)}`;

                document.getElementById("ddt").value = formattedDate;




            }
        });



        function initForm(form, data) {

            Object.getOwnPropertyNames(data).forEach(function (item) {
                var currentElem = form.elements[item.charAt(0).toUpperCase() + item.slice(1)];

                if (currentElem == null) { return; }

                if (currentElem.tagName == "SELECT") {
                    // Check the ID of the SELECT element
                    if (currentElem.id == "wbc") {
                        // Handle the case where the current element is a SELECT with a specific ID
                        var selectChildren = Array.from(currentElem.children);
                        var matchedOpt = selectChildren.find(opt => opt.innerText.trim() == selectedStudentHI.wbcunits.trim());
                        if (matchedOpt) {
                            matchedOpt.selected = true;
                        }
                    }
                } else {
                    // Handle the case where the current element is not a SELECT with the specific ID
                    form.elements[item.charAt(0).toUpperCase() + item.slice(1)].setAttribute("value", data[item]);
                }

                if (currentElem.tagName == "SELECT") {
                    // Check the ID of the SELECT element
                    if (currentElem.id == "neutrophils") {
                        // Handle the case where the current element is a SELECT with a specific ID
                        var selectChildren = Array.from(currentElem.children);
                        var matchedOpt = selectChildren.find(opt => opt.innerText.trim() == selectedStudentHI.neutrophilsunits.trim());
                        if (matchedOpt) {
                            matchedOpt.selected = true;
                        }
                    }
                } else {
                    // Handle the case where the current element is not a SELECT with the specific ID
                    form.elements[item.charAt(0).toUpperCase() + item.slice(1)].setAttribute("value", data[item]);
                }
                if (currentElem.tagName == "SELECT") {
                    // Check the ID of the SELECT element
                    if (currentElem.id == "lymphocyte") {
                        // Handle the case where the current element is a SELECT with a specific ID
                        var selectChildren = Array.from(currentElem.children);
                        var matchedOpt = selectChildren.find(opt => opt.innerText.trim() == selectedStudentHI.lymphocyteunits.trim());
                        if (matchedOpt) {
                            matchedOpt.selected = true;
                        }
                    }
                } else {
                    // Handle the case where the current element is not a SELECT with the specific ID
                    form.elements[item.charAt(0).toUpperCase() + item.slice(1)].setAttribute("value", data[item]);
                }

                if (currentElem.tagName == "SELECT") {
                    // Check the ID of the SELECT element
                    if (currentElem.id == "monocyte") {
                        // Handle the case where the current element is a SELECT with a specific ID
                        var selectChildren = Array.from(currentElem.children);
                        var matchedOpt = selectChildren.find(opt => opt.innerText.trim() == selectedStudentHI.monocyteunits.trim());
                        if (matchedOpt) {
                            matchedOpt.selected = true;
                        }
                    }
                } else {
                    // Handle the case where the current element is not a SELECT with the specific ID
                    form.elements[item.charAt(0).toUpperCase() + item.slice(1)].setAttribute("value", data[item]);
                }

                if (currentElem.tagName == "SELECT") {
                    // Check the ID of the SELECT element
                    if (currentElem.id == "eosinophil") {
                        // Handle the case where the current element is a SELECT with a specific ID
                        var selectChildren = Array.from(currentElem.children);
                        var matchedOpt = selectChildren.find(opt => opt.innerText.trim() == selectedStudentHI.eosinophilunits.trim());
                        if (matchedOpt) {
                            matchedOpt.selected = true;
                        }
                    }
                } else {
                    // Handle the case where the current element is not a SELECT with the specific ID
                    form.elements[item.charAt(0).toUpperCase() + item.slice(1)].setAttribute("value", data[item]);
                }


                if (currentElem.tagName == "SELECT") {
                    // Check the ID of the SELECT element
                    if (currentElem.id == "basophil") {
                        // Handle the case where the current element is a SELECT with a specific ID
                        var selectChildren = Array.from(currentElem.children);
                        var matchedOpt = selectChildren.find(opt => opt.innerText.trim() == selectedStudentHI.basophilunits.trim());
                        if (matchedOpt) {
                            matchedOpt.selected = true;
                        }
                    }
                } else {
                    // Handle the case where the current element is not a SELECT with the specific ID
                    form.elements[item.charAt(0).toUpperCase() + item.slice(1)].setAttribute("value", data[item]);
                }

                if (currentElem.tagName == "SELECT") {
                    // Check the ID of the SELECT element
                    if (currentElem.id == "hemoglobin") {
                        // Handle the case where the current element is a SELECT with a specific ID
                        var selectChildren = Array.from(currentElem.children);
                        var matchedOpt = selectChildren.find(opt => opt.innerText.trim() == selectedStudentHI.hemoglobinunits.trim());
                        if (matchedOpt) {
                            matchedOpt.selected = true;
                        }
                    }
                } else {
                    // Handle the case where the current element is not a SELECT with the specific ID
                    form.elements[item.charAt(0).toUpperCase() + item.slice(1)].setAttribute("value", data[item]);
                }


                if (currentElem.tagName == "SELECT") {
                    // Check the ID of the SELECT element
                    if (currentElem.id == "hematocrit") {
                        // Handle the case where the current element is a SELECT with a specific ID
                        var selectChildren = Array.from(currentElem.children);
                        var matchedOpt = selectChildren.find(opt => opt.innerText.trim() == selectedStudentHI.hematocritunits.trim());
                        if (matchedOpt) {
                            matchedOpt.selected = true;
                        }
                    }
                } else {
                    // Handle the case where the current element is not a SELECT with the specific ID
                    form.elements[item.charAt(0).toUpperCase() + item.slice(1)].setAttribute("value", data[item]);
                }



                if (currentElem.tagName == "SELECT") {
                    // Check the ID of the SELECT element
                    if (currentElem.id == "rbc") {
                        // Handle the case where the current element is a SELECT with a specific ID
                        var selectChildren = Array.from(currentElem.children);
                        var matchedOpt = selectChildren.find(opt => opt.innerText.trim() == selectedStudentHI.rbcunits.trim());
                        if (matchedOpt) {
                            matchedOpt.selected = true;
                        }
                    }
                } else {
                    // Handle the case where the current element is not a SELECT with the specific ID
                    form.elements[item.charAt(0).toUpperCase() + item.slice(1)].setAttribute("value", data[item]);
                }

                if (currentElem.tagName == "SELECT") {
                    // Check the ID of the SELECT element
                    if (currentElem.id == "mcv") {
                        // Handle the case where the current element is a SELECT with a specific ID
                        var selectChildren = Array.from(currentElem.children);
                        var matchedOpt = selectChildren.find(opt => opt.innerText.trim() == selectedStudentHI.mcvunits.trim());
                        if (matchedOpt) {
                            matchedOpt.selected = true;
                        }
                    }
                } else {
                    // Handle the case where the current element is not a SELECT with the specific ID
                    form.elements[item.charAt(0).toUpperCase() + item.slice(1)].setAttribute("value", data[item]);
                }


                if (currentElem.tagName == "SELECT") {
                    // Check the ID of the SELECT element
                    if (currentElem.id == "mch") {
                        // Handle the case where the current element is a SELECT with a specific ID
                        var selectChildren = Array.from(currentElem.children);
                        var matchedOpt = selectChildren.find(opt => opt.innerText.trim() == selectedStudentHI.mchunits.trim());
                        if (matchedOpt) {
                            matchedOpt.selected = true;
                        }
                    }
                } else {
                    // Handle the case where the current element is not a SELECT with the specific ID
                    form.elements[item.charAt(0).toUpperCase() + item.slice(1)].setAttribute("value", data[item]);
                }


                if (currentElem.tagName == "SELECT") {
                    // Check the ID of the SELECT element
                    if (currentElem.id == "mchc") {
                        // Handle the case where the current element is a SELECT with a specific ID
                        var selectChildren = Array.from(currentElem.children);
                        var matchedOpt = selectChildren.find(opt => opt.innerText.trim() == selectedStudentHI.mchcunits.trim());
                        if (matchedOpt) {
                            matchedOpt.selected = true;
                        }
                    }
                } else {
                    // Handle the case where the current element is not a SELECT with the specific ID
                    form.elements[item.charAt(0).toUpperCase() + item.slice(1)].setAttribute("value", data[item]);
                }



                if (currentElem.tagName == "SELECT") {
                    // Check the ID of the SELECT element
                    if (currentElem.id == "rcdw") {
                        // Handle the case where the current element is a SELECT with a specific ID
                        var selectChildren = Array.from(currentElem.children);
                        var matchedOpt = selectChildren.find(opt => opt.innerText.trim() == selectedStudentHI.rcdwunits.trim());
                        if (matchedOpt) {
                            matchedOpt.selected = true;
                        }
                    }
                } else {
                    // Handle the case where the current element is not a SELECT with the specific ID
                    form.elements[item.charAt(0).toUpperCase() + item.slice(1)].setAttribute("value", data[item]);
                }



                if (currentElem.tagName == "SELECT") {
                    // Check the ID of the SELECT element
                    if (currentElem.id == "pl") {
                        // Handle the case where the current element is a SELECT with a specific ID
                        var selectChildren = Array.from(currentElem.children);
                        var matchedOpt = selectChildren.find(opt => opt.innerText.trim() == selectedStudentHI.plateletcountunits.trim());
                        if (matchedOpt) {
                            matchedOpt.selected = true;
                        }
                    }
                } else {
                    // Handle the case where the current element is not a SELECT with the specific ID
                    form.elements[item.charAt(0).toUpperCase() + item.slice(1)].setAttribute("value", data[item]);
                }

                if (currentElem.tagName == "SELECT") {
                    // Check the ID of the SELECT element
                    if (currentElem.id == "mpv") {
                        // Handle the case where the current element is a SELECT with a specific ID
                        var selectChildren = Array.from(currentElem.children);
                        var matchedOpt = selectChildren.find(opt => opt.innerText.trim() == selectedStudentHI.mpvunits.trim());
                        if (matchedOpt) {
                            matchedOpt.selected = true;
                        }
                    }
                } else {
                    // Handle the case where the current element is not a SELECT with the specific ID
                    form.elements[item.charAt(0).toUpperCase() + item.slice(1)].setAttribute("value", data[item]);
                }




            });
        }


        $("#updateStudentHealth").click(function () {
            alertSaveChanges();
        });

        function alertSaveChanges() {
            Swal.fire({
                title: 'Do you want to save the changes?',
                confirmButtonText: 'Save',
                showCancelButton: true,
            }).then((result) => {
                /* Read more about isConfirmed, isDenied below */
                if (result.isConfirmed) {
                    updateStudentHolder();
                }
            })
        }

        function updateStudentHolder() {

            var arrData = {};
            var formelements = $("#StudentHealthUpdateForm .form-group");

            //getting the data from the form
            var formInputs = $("#StudentHealthUpdateForm").serializeArray();
            formInputs.forEach(function (item) {
                arrData[item.name] = item.value;
            });




            var wbc = $('#wbc option:selected').text();
            var neutrophils = $('#neutrophils option:selected').text();
            var lymphocyte = $('#lymphocyte option:selected').text();
            var monocyte = $('#monocyte option:selected').text();
            var eosinophil = $('#eosinophil option:selected').text();
            var basophil = $('#basophil option:selected').text();
            var hemoglobin = $('#hemoglobin option:selected').text();
            var hematocrit = $('#hematocrit option:selected').text();
            var rbc = $('#rbc option:selected').text();
            var mcv = $('#mcv option:selected').text();
            var mch = $('#mch option:selected').text();
            var mchc = $('#mchc option:selected').text();
            var rcdw = $('#rcdw option:selected').text();
            var plateletcount = $('#pl option:selected').text();
            var mpv = $('#mpv option:selected').text();







            arrData.ShiId = selectedStudentHIId;
            arrData.Wbcunits = wbc;
            arrData.Neutrophilsunits = neutrophils;
            arrData.Lymphocyteunits = lymphocyte;
            arrData.Monocyteunits = monocyte;
            arrData.Eosinophilunits = eosinophil;
            arrData.Basophilunits = basophil;
            arrData.Hemoglobinunits = hemoglobin;
            arrData.Hematocritunits = hematocrit;
            arrData.Rbcunits = rbc;
            arrData.Mcvunits = mcv;
            arrData.Mchunits = mch;
            arrData.Mchcunits = mchc;
            arrData.Rcdwunits = rcdw;
            arrData.Plateletcountunits = plateletcount;
            arrData.Mpvunits = mpv;


            arrData.Datet = selectedStudentHI.datet;
            arrData.spiId = selectedStudentHI.spiId;





            console.log('checking', arrData);
            var dtr = $('#dtr').val();
            var ddt = $('#ddt').val();

            var dateTimeRequested = formatDateTime(dtr);
            var drawDateTime = formatDateTime(ddt);



            arrData.Cbcdatetimerequested = dateTimeRequested;
            arrData.Cbcdrawdatetime = drawDateTime;

            //  console.log( arrData.Cbcdatetimerequested);


            function formatDateTime(dateTime) {
                return new Date(dateTime).toLocaleDateString('en-US', {
                    year: 'numeric', month: 'numeric', day: 'numeric', hour: 'numeric', minute: 'numeric'
                });
            }



            if (formInputs.length === formelements.length && formInputs[0].value !== '') {

                proceedUpdate(arrData);

            } else {
                alertError();
            }
        }


        function proceedUpdate(arrData) {

            //AJAX UPDATE DEPARTMENT
            $.ajax
                ({
                    url: "../api/adminapi/UpdateStudentHealth",
                    type: "POST",
                    data:
                    {
                        upsth: arrData,
                    },
                })
                .done(function () {
                    $("#StudentHealthUpdateForm")[0].reset();
                    $("#modalStudentHealthUpdate").modal("toggle");
                    // displayStudentData();
                    populateIndex();
                    displaySavedProgress();




                });
        }


        $("tbody").delegate(".StudentHIDelete", "click", function (e) {
            var i = e.target.closest("a").getAttribute("data-shiId");
            if (i != null) {
                //Insert code here for the delete
                selectedStudentHIId = i;
                console.log(selectedStudentHIId + "mao ni siya");
                alertDeleteConfirmation();
            }
        });

        function alertDeleteConfirmation() {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to Delete this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    proceedDelete();
                }
            })
        }

        function proceedDelete() {
            // console.log(selectedStudentHIId + "proceed");
            //AJAX DELETE DEPARTMENT
            $.ajax
                ({
                    url: "../api/adminapi/DeleteStudentHealth",
                    type: "POST",
                    data:

                    {
                        id: selectedStudentHIId
                    },
                })
                .done(function () {
                    setTimeout(function () { location.reload(); }, 100);

                    alertDeleteInfo();
                });
        }































        function alertDeleteInfo() {
            Swal.fire(
                'Deleted!',
                'Your file has been deleted.',
                'success'
            )
        }


        function vol1() {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Inputted name is already in the data',
            })
        }
        function alertError() {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Input the necessary elements!',
            })
        }

        function displaySavedProgress() {
            Swal.fire({
                icon: 'success',
                title: 'Your work has been saved',
                showConfirmButton: false,
                timer: 1500
            })

        }















    });// end of this do not touch it


</script>