@Html.Partial("PartialAccounting/StudentTable")
@Html.Partial("PartialAccounting/paymentModal")





<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>



<script>

    var AccountInfoListId = {};
    var PatiendId = [];
    var RecordList = {};

    var selectedPatientId;
    var selectedPatient;



    $(document).ready(function () {


        displayAccountingData();











        function displayAccountingData() {
            $('#AccountingData').DataTable().destroy();
            if (!$.fn.DataTable.isDataTable('#AccountingData')) {
                $('#AccountingData').DataTable({
                    ajax: {
                        url: '../api/adminapi/accountingInfo', // API endpoint to retrieve department
                        dataSrc: ''
                    },
                    columns:
                        [
                            { data: 'patient' },
                            { data: 'fullname' },
                            { data: 'payableStatus' },
                            { data: 'balance' },


                            {
                                data: 'accountingInfoId',
                                render: function (data, type, row) {
                                    return btnAddAcct(data, row.balance);
                                }
                            },
                        ]
                });
            }

        }

        function btnAddAcct(accountingInfoId, balance) {
            if (balance === 0) {
                return "<center><a style='color : #ffffff;' class='btn btn-info AcctUpdate disabled' data-accountingInfoId=" + accountingInfoId + ">Pay</a> </center>";
            }
            return "<center><a style='color : #ffffff;' class='btn btn-info AcctUpdate' data-accountingInfoId=" + accountingInfoId + ">Pay</a> </center>";
        }


        async function getAccountingInfo() {
            let result = await $.ajax("../api/adminapi/accountingInfo");
            var patiendIdFor = [];
            RecordList = result;

            //     console.log("List: ", RecordList);

            result.forEach(function (item) {
                patiendIdFor.push(item.patientId);
            });

            return [...new Set(patiendIdFor)]; // Return the unique patient IDs
        }

        // Usage
        (async () => {
            let PatientId = await getAccountingInfo();
            console.log("patient id: ", PatientId);


            studentInfo(PatientId);


            $.ajax("../api/adminapi/getEmployee")
                .done(function (result) {


                    result.forEach(function (item) {

                        const empId = item.epiId;
                        // Check if empId is not in PatientId
                        if (!PatientId.includes(empId)) {
                            console.log("Missing ID: ", empId);

                            AccountingData =
                            {
                                patientId: empId,
                                payableStatus: "Pending",
                                balance: 1000,
                            }

                            $.ajax
                                ({
                                    url: "../api/adminapi/addAccountingInfo",
                                    type: "POST",
                                    data:
                                    {
                                        act: AccountingData
                                    },
                                })
                                .done(function () {

                                    console.log("successfully added to database")
                                });



                        } else {
                            console.log("ID exists: ", empId);
                        }

                    });
                });


        })();

        function studentInfo(id) {

            console.log("id form accounting: ", id);


            $.ajax("../api/adminapi/getStudent")
                .done(function (results) {

                    const filteredResults = results.filter(student => student.scholar === "NA");
                    filteredResults.forEach(function (items) {

                        const stid = items.spiId;
                        // Check if empId is not in PatientId
                        if (!id.includes(stid)) {
                            console.log("Missing student ID: ", stid);


                            AccountingData =
                            {
                                patientId: stid,
                                payableStatus: "Pending",
                                balance: 1000,
                            }

                            $.ajax
                                ({
                                    url: "../api/adminapi/addAccountingInfo",
                                    type: "POST",
                                    data:
                                    {
                                        act: AccountingData
                                    },
                                })
                                .done(function () {

                                    console.log("successfully added to database")
                                });




                        } else {
                            console.log("ID student exists: ", stid);
                        }

                    });
                });
        }

        $("tbody").delegate(".AcctUpdate", "click", function (e) {
            console.log("I was clicked");

            var i = e.target.closest("a").getAttribute("data-accountingInfoId");

            if (i != null) {
    @* $("#createCategoryForm")[0].reset(); *@
                    $("#modalpayment").modal("toggle");

                selectedPatientId = i;
                selectedPatient = RecordList.find(element => element.accountingInfoId == i);


                console.log("Selected Patient:", selectedPatient);

                console.log("pay value", i);
                $(".headerName").html(selectedPatient.fullname);
                $(".headerBalance").html(`Balance: â‚± ${selectedPatient.balance} `);
                // $("#inputId").html(`${selectedPatient.accountingInfoId} `);

                $("#inputId").val(selectedPatient.accountingInfoId);





            }

        });



        $("#createPayment").click((e) => {



            var arrData = {}; //ayaw ni tan dug kani dre nga line
            var formelements = $("#createPaymentForm .form-group");

            //getting the data from the form
            var formInputs = $("#createPaymentForm").serializeArray();
            formInputs.forEach(function (item) {
                arrData[item.name] = item.value;
            });

            const now = new Date();
            const formattedDate = now.toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' });

            console.log(`Date: ${formattedDate}, Time: ${now.toLocaleTimeString()}`);
            arrData.Dateandtime = `${formattedDate},${now.toLocaleTimeString()}`

            arrData.Balance = selectedPatient.balance - arrData.Pay;


            if (formInputs.length === formelements.length && formInputs[0].value !== '') {

                console.log("Data: ", arrData)

                $.ajax
                    ({
                        url: "../api/adminapi/addAccountingHistory",
                        type: "POST",
                        data:
                        {
                            payment: arrData
                        },
                    })
                    .done(function () {

                        $("#createPaymentForm")[0].reset();

                        displaySavedProgress();

                    });

            }
            else {
                alertError();
            }
        });




        function alertError() {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Input the necessary elements!',
            })
        }

        function displaySavedProgress() {
            Swal.fire({
                icon: 'success',
                title: 'Your work has been saved',
                showConfirmButton: false,
                timer: 1500
            })

        }












    });// end of the function

</script>